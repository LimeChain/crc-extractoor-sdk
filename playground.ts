import rlp, { decode } from 'rlp'
import { bufferToHex, keccak, setLengthLeft, toBuffer } from 'ethereumjs-util'
import { SecureTrie as Trie } from 'merkle-patricia-tree'
import Account from 'ethereumjs-account'
import { MPTProofVerifier } from './src/verifier/MPTProofVerifier'
import { MPTProofsEncoder } from './src/encoders/MPTProofsEncoder'
import { EthereumRequester } from './src/networks/ethereum/EthereumRequester'
import { OptimismRequester } from './src/networks/optimism/OptimismRequester'
const dotenv = require('dotenv');
dotenv.config()

async function test() {
    const trie = new Trie()
    await trie.put(Buffer.from('test'), Buffer.from('one'))
    const proof = await Trie.createProof(trie, Buffer.from('test'))
    console.log(proof);
    const value = await Trie.verifyProof(trie.root, Buffer.from('test'), proof)
    console.log(value.toString()) // 'one'
}

async function test2() {
    const stateRoot = '0x1e2df0cf94795d556ff3b625a0ef5c851823e8276b67ea22b01e8c7d41c5b9d3';
    const target = '0x4200000000000000000000000000000000000016';
    const accountProof = ["0xf90211a02848405565b7cb9fc2022794a84957351ac94f0dbd769bf144924737da68751da0f911506e1ca8be3a0457d87704b79c0cf84838c82131740303503400c40f9affa070980d6b9557997c35101065c56dc3fd615ee06ec84391a16b1d9c5d4ea0f9c8a0816d29d3e7dbc3b05a15de9ec8bfbb0e982e1cd723116d8d344bd07438fd7a37a02ded89b2cff33f89df497cfbc77381b9e909bde229db54be98f5426a767c7d36a0c2324d082fad9eb50a7aa9a3c3ff645d6a0ac89bc0ccd2f8a16c4deb6189564ea0d2e835868156e95665e361702513317e82c3aa729fba9fb5ed51aa44bb0b6cd1a0114f3a2d8020a11346f971ad51c137758120d4527e044c6f88475d3554cc03c4a03c14f28e2bd668afdf77972b30b2dcf5991b8560397e51efdaf07e98825d5cb2a0d6da9dc10f9493f76bd350fa6a27183154f792f83fecda419c9e54073af5fd4fa0f21ebe6b649ffb0f5449152f16fa0d5b9f924de74311384edc200ea85c7e4c5ea0e1012d40453531025fbdc2d70407e388f1cf7dd1c44a7ee6f0329fcfe49bc0c2a0cdea4abbe19266238192f9f3441f6293a546ea40cee1e349bb41270537a9325aa068db46dfd4396678057404f8d9160de14538a04307d6cee358d3d19ce07055eca0fbd8098fd59f32efde5e8de2500c6f49f63478e513f0fda1be7469fbd1ffea4ca0fb01cd7a30f4af48feff1e1de8ae7db3d2100c621cda487b39e536d38bca80b980", "0xf90211a0f92c5bedc0ea7e2cb506471fcaf5a4b603fc8ca32800993ac11fa9ad8f3e21c1a08dbe6c70c7ba2e7babf91bf34f772e069a8e2cb8259f9b1f43104e1d85c1f38aa0e1a2cbb91b7828634db93ab64fbc6825383f308f07e7d2e598bedc5cb715e178a0c06ba0bf271e1e33f112f465039911dacfbfba5550b9b9abe74c95ebe9ae48b1a059a1b598c8ae99118897dc02d3a1d8ae33d0e4a4ee579b2195a2b0544ffd1efca06be73e9cf8cbbc3e23c39fd20a48e1dd039793700e793380a81a2f55283942bca0c31368529700dcefb2e1d937fa9ac140e4ff385f9e5b16a302e257a59408944da05d59fb7d9ef14cd3e15d06716728280996bd73226d4d8ac403152c088e0c34fca08049629f9da3282ea75695695237bb077eafa96d063121d61bac2df8ed020647a0034644dbeb1a9ebb776213d12817a06878953fd60d32a5b24dcafd5708fc3346a0ef9ef092e2983fada39a6593e34eb0e732f05f42534501ba2e447d5b7cb96f00a0c934e3ca9038833e4bf8ae914a389a0eb48c6f9928484e08bb80505d081e9803a0f5dcfaff4b748d9b24b5a338386be18214b0ae60920b3943a48cee4aea77ff3ea04be57e4626a0a8eec48745eb6bd693e058f7e6220ecd5aa3358485a8a1730a52a072485990b34bc52c66afbfacbc858338bf4ecff94fabbb424475418341de9fd1a0be5908907f914bbd2654579034b4fb5ab2e6596fda88302b55a7bf8d7b931ea980", "0xf90211a0c6129e1e7b612efbf95864388038add4101ca9944f5663e8c1f117418add79bfa06ee8e0d1145a54f56556edac9aa25eeb65532399c44a8a30e055a22c4f4f2c90a0846b81d0806c4f66fee02b2cfd223e06aba055ab0a7b3c51050b1c36bc15b429a097561d1b2c68dc94f4f1c844fceb45698a5562bf1c7eeb3d22325c47272461f7a071fc8971aab98d18317dae908370e77dd9edc09e1c6b428d3c969974c806808da0bfd028cf921f577bf8f0105c1be48f5e91bf44b6db0b911aa641f9340a3767f1a0fbd92a93390a330a366017a7fbec2cd8b6aa07435ba166e93a2fed31e5c394cca0ccd231db3a485e1209fad4bb0895c81100e663a1c1cf5ae4430e4c2d9c258360a03c3450e853adc87cefa0eaf1ae03a01554bdc9c0faea0e4c63ba1220705b06a2a01f865b4144e30aab02f747761b52f31327c2a1641f9323701fa15e730f696d50a01b85203330e94fcd5b336d4d5f3d662a2e37b244e9b7c47e7a4156734299dd81a0a52c29c4c4d9314ae51103dc76ff8922acd2f0234640c7036410ecc33cefc083a0aa1a53835949ec50fd65ebe521e6314bb90ac03270d2bc99462b5ba82cf02aaca08fcb876f11d66431a57757cee3371117576e5d4d1f3782d174390bb0be31f8c9a07fc61262577626810ed73f23b405bf5043dd7543efddda0b0cb40254686e5110a0550f43cc00ce18d9263739714bf384adfe6cc581e7bf319bdb874ad0552f2c2c80", "0xf901b1a08be7045b8a06cb4457f8c46fc7d038e314b012372a4c4f900cda3a6cc41a377b80a0402ac74d2ee098e11ce6b433df0b5153b9340a9103c8aa50447aa04b07de613a80a03827f391fd3f89763544ee3ad039a6789dbfd976d2a0c3ddef9a5037a5dba1d2a0decb884a83d916117d2683f6526f579d32ed3c47ea87a3113627e717ab6d5f7fa06ee4e1acdf3b55fd46bdce61c26f23248856d9420a3550d925e211309645210ea0e0868cd88629c07351f7025e5b14e1e6403d325139de417c0c0d167f50a84c03a0ddb5865701ec03a263d7d4b29d8503c84dfa68d179530ba979e3b43154ba073980a0965ed7fa83ce9fdf3a7601df53d840d7b4ebbfa1d8c4452f75f8b273e4a9fbb2a0f04f9b36792766f2a0b2f023a3b3ed650047a056142c5840c624f0f1dac1c55da0134ba1280dbce59548c85bffccaeb306ad470edbbc1a416b4db4e32363158f38a0942c24839d62691838ae1f86e147c9cb4a30e7ebd920e6f24d2b7c2aac9155fda09297df19a01a68656f9be62dbb2a30643f201da5c4cd4697d454dde637fd3a4aa0592555916e5d103c3b7d7c1270959d3c8a6b9ab0ecb66ab8b24c966f45aa686680", "0xf8518080a0a0aa2ae3cc010e67c4779b5e8d6fa2e706a02eafb353f393d5fa02561345ceed808080a013423749d3c254f58d7e5351b677c31f574a74c988e285252487023cbec6980380808080808080808080", "0xf8709e30b0147f4cc0e0156d993334777d699c312c2fe454f8b3fa338ed309f4a0b84ff84d028901411c571fb709635da0faea2ea4f0dad0ef8181a534b468daeed54a4141277e6a5dae03f1663a8d977fa01f958654ab06a152993e7a0ae7b6dbb0d4b19265cc9337b8789fe1353bd9dc35"];
    const storageSlot = '0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564';
    const storageProof = ["0xf90211a0d53cc85cd9e8a8512758707a84b58ede23ceb226d02ce85634d3ddbdbf2f9571a09fa90309fe28bb9ec27f4af7494019880c59a40839ba0af3503fd40d96e795e7a09a8819b593147aedce42387fcaa03843456ada08d2c82b73a4ddb0a3a5de50f5a0db2df8da9563340ae58d22ee6ffb4dc9b1c009a2e7362843add1b579e4b347bca0fe99281c26d95c36bae3fc82899ac0f98af3a0cb394d09dd06458047f1e19791a0a1f2009bcec0d509e3bddbfef1ee4260e79dc9dc418572a77bb3b3da7198127ba0e8f20f2cde72d121bc39abb4c5e5985d24ec19e129a90321f2874ac9b49732baa0cfef855752c2be13c039b771a3634f767e33e71aa9db596b4893378bf9f478bda072c5ece3a49574e741a0b3474a852ce7af7805968d39a01f2d2a18de19e0bd40a0044dda3b2f03229565039ff17fa50093335746aacd4e2ff230766cd6f1e1cf6aa029368114ec090a5fe1022408ed393d554611d9a3d01fbec45b1b8786567224c2a00b4895a7f9efa0767af79b7359301c9cb006a1defa854b6f123cce69de878bf0a0745a021fecd4d4239b6b00c1f3af3d15c2688101cbe7709189c9c3250208d86ea04b9ddd7a0bc1caa7999ee3bb462e00a92c3aa1efcf78770eba670edca6d31a1ea03cf6faef7d73f1cd5a11bec16f09420b4770da9596db6d63277bc45507c77fb8a004c48f4fb4178c769337c0bfb2ac1d47d69c17a04bdacabad581e3f36f2960d380", "0xf90211a079fb27ae1e71a62720a15daf145a0a5b09126c2e9af63b55950c1e60adeb5494a0b14c721343b56da97d7250bcf1a897f2c560703d7f296d6e79734c317f7573bba0e53b23dc6d49cc8cbb88fdcba18c27b326206ef28896bc68a11254c11ff7f3f2a086f8c7dc825c5886a318ae0e9625dc15d52528c51f5555e83326564155cc0b72a07d907f7b0f4d6b9b0beed8497e6a52fed7af00e07bf7583ea6cffb0793542361a0ea6d6402d78bdaee74af4baf3124851357b8b1b54e2f4b7d8593acdff35649d0a042523a3912a83ef678c8853a4344b7da3de9d19442e0b859629ad0f16dfc143ea094cd5bb08ca31886efd5c2bd3275c70e3a0ca5501c618bd05ca46266941ead70a02ef79beea29b6f8b8e5a8f06cfa8d8c8fefd225e4ccb666b7d640d6ab9378da5a0bada65a1da298684a56beb3505c44f45549a643fc346221510cf521f5d4c37c7a0550835544fe3c5743160b81fb79ea82c5ecc56cc1ab134febc0b7d1b957cfc77a09263638fdbceb13063fdfebcd94e1df5bf350a0bac05249077292604d26d315aa0b9f17ec5fd6d987550f2bd9750b017829add84e5efc19554f158481d59fe2b16a0586dfcad894b77ed3dfe44145280fbd4e74b4da56a89e7bdd61a5df88a8a621ba0c6651130204a7365f8a063f003f10a8fae30eed441a68d1fcbccd33028505c3ea07d8c7cf4d1834e60f1b995d488d078b033fa39f909b5ca07d37d85ca24ef22a080", "0xf901d1a09c2209d50639f290a012b6f967da95757d7515ea1313385015a92091793d0e73a093d13778ea74781c0af5912d9abe05a9807f57555ae0b6bbf1e890fc5ef325dca00aede048a9b5a80505a282f3e24a62128e46754b1f8a611a1262a3c631b10edda04b6eedad70c39aaffcbfbd7f5f9589a9e2c5690f36148bbe780946cde3090068a0dc23137e86e38481a09646aaed9e8ac60f5c468aedffbec5477f481a9d6250fba0d3131c209f42321c2072d7b2535669ed7cc80a1651846d7ebfbf7bd6021435aaa09756cc80d7e3f2c136cff63a4dde9cfc4d3ffc90b1c9f86885d4cbbf3ca958d1a0b750fe641a452fd7edeabab6b7b4e3df44f8d9068c741d6e2c262bd4f42cf3fea0f2f50662f8bf34a69917d610b35280ef036fb3e10ec0d77c57a89d33455aef85a026e300a0fb21ea9f9bd26d81aa1b5101232593ea834fc822117091d7b7f5b12ba0fe49eec3a0d90d41c9de4aa8cb4bc31c5da7cdda409b52be9541dfd485aec65680a0e954aa7e329f88f33b70ad81fcec4c4a74045c3f402bcaf72bd57994619440aea056dd80928aa00e040f0060c6fc24079a5a5249d83015166f11dbfd71d527460da0f85e2b2ef7a1d7a3387749877941459b34e61a4f4d2f3c3883ff352732cac0ed8080", "0xf871808080a0792ea78c8651bd139eade43f8ce9768eb38abb31165372e34b0f6f0292703f168080808080a04c955d07e05e915ab0c3cc7ef2f153182bc116146aadce00434afd4bfc15ff2380808080a0a2b444fd0e6900a4a196980c5ec2d296e351e026a2ad404299be592134e94c668080", "0xe19f20d9fd97c719256f144bb1a49d806503ed0967e2039156377936dd32fea61c01"]

    const account = await MPTProofVerifier.verifyAccountProof(stateRoot, target, accountProof);
    console.log("Account", bufferToHex(account.nonce), bufferToHex(account.balance), bufferToHex(account.stateRoot), bufferToHex(account.codeHash));

    const storageValue = await MPTProofVerifier.verifyStorageProof(bufferToHex(account.stateRoot), storageSlot, storageProof);
    console.log("Storage Value", bufferToHex(Buffer.from(storageValue)))

    const rlpAccountProof = MPTProofsEncoder.rlpEncodeProof(accountProof);
    console.log("RLP Encoded Account Proof", rlpAccountProof);

    const rlpStorageProof = MPTProofsEncoder.rlpEncodeProof(storageProof);
    console.log("RLP Encoded Storage Proof", rlpStorageProof);

    const combinedProof = MPTProofsEncoder.rlpEncodeProofs([accountProof, storageProof]);

    console.log("Combined Proof", combinedProof);


}

async function test3() {
    const fetcher = new EthereumRequester("..");

    const res = await fetcher.getProof("0x058A39bEFBBA6a41e1CcBE97C3457dcc894B0fF2", "0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564", 8485133);

    console.log(res);
}

async function test4() {
    const blockNum = 5529028;
    const fetcher = new OptimismRequester(process.env.OPTIMISM_GOERLI_RPC_URL, process.env.GOERLI_RPC_URL);

    const output = await fetcher.generateOutput(blockNum);

    console.log(output);
}

test4()